{"name":"Chii2 MQTT","tagline":"MQTT Message Server","body":"### About Chii2 MQTT.\r\n[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport.    \r\nChii2 MQTT provides full [MQTT V3.1 Protocol Specification](http://www.ibm.com/developerworks/webservices/library/ws-mqtt/index.html) server side implementation, which means you can use Chii2 MQTT as Message Server (broker). Chii2 MQTT is written purely in Java, designed to be lightweight fast reliable and extensible, it can running as standalone or embedded. Project is under Apache License v2.\r\n\r\n### Roadmap\r\n_Beta Release: 1.0.0 Snapshot_\r\n```\r\nMQTT V3.1 Protocol Specification\r\n        Connect              Completed\r\n        Publish QoS 0        Completed\r\n        Publish QoS 1        Completed\r\n        Publish QoS 2        Completed\r\n        Subscribe            Completed\r\n        UnSubscribe          Completed\r\n        Ping                 Completed\r\n        Disconnect           Completed\r\n        Retain               Completed\r\n        Will                 Not Implemented\r\n        Resend               Partially\r\n        Keep Alive           Not Implemented\r\n        Authorization        Not Implemented\r\n        SSL                  Not Implemented\r\n```\r\n\r\n### Bulid\r\nChii2 MQTT project using [Maven](http://maven.apache.org/) as management and comprehension tool.\r\nTo build project from source, you need to install maven on your system. Then clone the source code from [github](https://github.com/longkerdandy/chii2mqtt), and run following command:\r\n```\r\n$ mvn clean install\r\n```\r\nChii2 MQTT has following dependencies:commons-lang3,commons-dbutils,netty,disruptor,derby,slf4j\r\n\r\n### Running in OSGi\r\nChii2 MQTT is designed to be OSGi compatible, and the derby storage bundle will automatically injected by OSGi Blueprint service. Project shipped with a [sample server and client](https://github.com/longkerdandy/chii2mqtt/tree/master/chii2.mqtt.server.sample), to running the sample:\r\n```\r\n$ mvn clean install\r\n$ cd assembly\r\n$ java -jar bin/felix.jar\r\n```\r\nThe sample server using OSGi Blueprint to inject derby storage. The init and destory method are also called from Blueprint service:\r\n```\r\n/**\r\n* Sample OSGi Server\r\n*/\r\npublic class OSGiServer {\r\n\r\n    // MQTT Server Configuration\r\n    private MQTTServerConfiguration brokerConfiguration;\r\n    // MQTT Server Storage\r\n    private StorageService brokerStorage;\r\n    // MQTT Broker\r\n    private MQTTServer broker;\r\n    // The Logger\r\n    private final Logger logger = LoggerFactory.getLogger(OSGiServer.class);\r\n\r\n    /**\r\n    * Injected Storage Service\r\n    */\r\n    public void setBrokerStorage(StorageService brokerStorage) {\r\n        this.brokerStorage = brokerStorage;\r\n    }\r\n\r\n    public OSGiServer() {\r\n        // Init MQTT Server Configuration\r\n        brokerConfiguration = new MQTTServerConfiguration();\r\n        brokerConfiguration.setServerName(\"Chii2 MQTT Server\");\r\n    }\r\n\r\n\r\n    /**\r\n    * OSGi life cycle init\r\n    */\r\n    public void init() {\r\n        logger.info(\"Chii2 MQTT Server Init.\");\r\n        // Init MQTT Server\r\n        broker = new MQTTServer(brokerConfiguration, brokerStorage);\r\n        broker.start();\r\n    }\r\n\r\n    /**\r\n    * OSGi life cycle destroy\r\n    */\r\n    public void destroy() {\r\n        logger.info(\"Chii2 MQTT Server Destroy.\");\r\n        broker.stop();\r\n    }\r\n}\r\n```\r\nIf you don't want to use Blueprint, you can declare the derby storage manually with the same way as running Chii2 MQTT embedded.\r\n\r\n### Compatible Clients\r\nChii2 MQTT is tested with [Eclipse Paho](http://www.eclipse.org/paho/) MQTT client library.\r\n\r\n### Author\r\nGu Dongxu (@longkerdandy) can be reached at longkerdandy@gmail.com.    \r\n**PS: The author is available to hire at Shanghai, China.**\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}